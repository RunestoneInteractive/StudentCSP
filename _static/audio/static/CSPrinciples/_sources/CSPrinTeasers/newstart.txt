..  Copyright (C)  Mark Guzdial, Barbara Ericson, Briana Morrison
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with
    Invariant Sections being Forward, Prefaces, and Contributor List,
    no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
    is included in the section entitled "GNU Free Documentation License".

..  shortname:: Chapter: What You Can Do with a Computer
..  description:: Some tidbits of what you can do with a computer

.. setup for automatic question numbering.

.. 	qnum::
	:start: 1
	:prefix: csp-1-


.. |runbutton| image:: Figures/run-button.png
    :height: 20px
    :align: top
    :alt: run button

.. |audiobutton| image:: Figures/start-audio-tour.png
    :height: 20px
    :align: top
    :alt: audio tour button

.. |teachernote| image:: Figures/apple.jpg
    :width: 26px
    :align: bottom
    :alt: teacher note


This Book is for Teachers
-----------------------------

This chapter introduces the approach used in this book and offers some quick "teasers" of things we'll be doing later.  **Don't worry if you don't understand all the code (programs) that you see in this chapter**.  We'll go through things much more slowly in the next few chapters.

..	index::
	single: Python

This electronic book is different because it uses *examples plus practice*.  Most computer science books are about becoming professional software developers.  Most computer science courses require you to write lots of code.  This book helps teachers learn how to *teach programming*.  It will use the programming language **Python** which is used by companies like Google and Pixar.  

.. figure:: Figures/HappyTeacherInComputerClass.jpg
    :width: 400px
    :align: center
    :alt: a teacher in a computer classroom
    :figclass: align-center

    Figure 1: A teacher in a computer classroom

- Rather than have you write lots of code, we will ask you to *read* a lot of code *examples*, because that's what computer science teachers do most often.
- We ask you to *use* what you are learning from the examples in some simple *practice* exercises.  These exercises are meant to be short and easy, to fit into a teacher's busy life.
- As a teacher, you need to know what students most often *get wrong*, where you can find *resources* to help you teach, and *how* to teach different ideas.  The book is sprinkled with |teachernote| **Teacher Notes** that explain how to be an effective computer science teacher.
- **You don't have to install anything**.  You will read, edit, and run programs all from within the pages of this ebook inside the browser.

Compute with Numbers
--------------------

..	index::
	single: variable
	pair: programming; variable

The first thing that anyone says when asked what you can do with a computer is typically, "Calculate something with numbers."  Yes, you can do that, but with a programming language on a computer, you can *name* the numbers you are working with which makes it easier to understand what you're doing.  When you name a number, or the result of a calculation, you are creating a **variable**.  A **variable** is named space that you can use to hold a value and that value can change or vary.  One example of a **variable** is the score in a game.  The score starts off at 0 and increases as you play the game.

.. figure:: Figures/pongScore.png
    :width: 400px
    :align: center
    :alt: A game in Scratch with a score
    :figclass: align-center
    
    Figure 2: A pong game in `Scratch <http://scratch.mit.edu>`_ with a score shown in the upper left.

One thing that you might want to calculate is a **Body Mass Index**.    `Body Mass Index (BMI) <http://www.nhlbi.nih.gov/guidelines/obesity/BMI/bmicalc.htm>`_ is a measure of body fat that is useful in screening for health issues.  Generally speaking:

- A BMI of 18.5 or less is considered *underweight*.
- A BMI between 18.5 to 24.9 is considered *healthy*.
- A BMI between 25-29.9 is considered *overweight*.
- A BMI of 30 or over is considered *obese*.

To calculate a BMI, you need the height in inches and the weight in pounds.  You square the height (multiply the height in inches by itself), then divide the weight in pounds by the squared-height.  BMI is defined in terms of meters and kilograms, so to convert from pounds and inches multiply by 703.

In the box below is a computer program that calculates the BMI for someone 60 inches tall (5 feet) and 110 pounds.  

Press the |runbutton| button below to make the computer execute these steps. 

Pres the |audiobutton| button below to bring up an "Audio Tour" that explains this program, line-by-line.

You can only use the *Save* and *Load* buttons if you are logged in. The *Save* button will save the current program and the *Load* button will load a saved program.

.. activecode:: BMI
    :tour_1: "Line-by-line Tour"; 1: BMI-line1; 2: BMI-line2; 3: BMI-line3; 4: BMI-line4; 5: BMI-line5; 6: BMI-line6; 7: BMI-line7; 
    :nocodelens:
    
    height = 60    # in inches
    weight = 110   # in pounds
    heightSquared = height * height
    BMI = weight / heightSquared
    BMImetric = BMI * 703
    print("BMI:")
    print(BMImetric)

Change the weight (in inches) and height (in pounds) in the program above, and press the *Run* button to calculate a new BMI.  Notice how naming the values for height and weight makes it easier to figure out what values need to be changed.

.. mchoicemf:: 1-BMI_Q1
   :answer_a: 21.9
   :answer_b: 21.924704834
   :answer_c: 21
   :answer_d: 22
   :correct: b
   :feedback_a: Close, but the computer will give you more digits than that.
   :feedback_b: Yes!
   :feedback_c: No, the result will be a number with a decimal point and numbers after the decimal point.
   :feedback_d: No, the computer does not round the result.
   
   Imagine that you are 5 foot 7 inches and weighed 140 pounds.  What is your BMI?


Compute with Words
------------------

..	index::
	single: string
	pair: programming; string

The computer can also compute with words, or more accurately, with **strings** which are sequences of characters.  A **string** is anything we can type between a pair of double quotes (``"Hi"``).  We can "compute" with words using some of the same basic arithmetic operators -- they just mean something different here.  Here we generate silly song lyrics by using ``+`` to combine (append) two strings and ``*`` to repeat strings.

Underneath the program below, to the right of the *Run* button |runbutton|, you'll see the button to open the audio tour for this program: |audiobutton|.  Try it, and listen to the "Line-by-Line Tour."  You can use the provided buttons to pause, play, jump ahead, or go back. 

.. activecode:: String_Operators
  :tour_1: "Line-by-line Tour"; 1: str1-line1; 2: str1-line2; 3: str1-line3; 4: str1-line4; 5: str1-line5; 6: str1-line6; 7: str1-line7; 8: str1-line8; 9: str1-line9; 10: str1-line10;
  :nocodelens:
  
  basic = "Ma"
  print(basic)
  basic3 = basic + basic + basic
  print(basic3)
  next = "Mow"
  next3 = next * 3
  print(next3)
  together = (basic * 3) + (next * 2)
  print(together)
  print(together + "Mmm" + together)
  
..	index::
	single: dot-notation
	pair: programming; dot-notation

A string can also be asked to return a new string that is changed in some way from the original string.  In the example below, we'll take a string in all-caps and turn it into a nicely capitalized sentence.  This example uses **dot-notation** (``sentence.lower()``) which is how we tell a string how we want it to change. 

.. activecode:: String_Methods
   :tour_1: "Line-by-line Tour"; 1: str2-line1; 2: str2-line2; 3: str2-line3; 4: str2-line4; 5: str2-line5;
   :nocodelens:
   
   sentence = "THIS IS A TEST"
   better = sentence.lower()
   print(better)
   betterStill = better.capitalize() + "."
   print(betterStill)
   
.. mchoicemf:: 1-String_Methods_Q1
   :answer_a: Hi There
   :answer_b: HiThere
   :answer_c: Hi There Hi There
   :answer_d: HiThereHiThere
   :answer_e: HiThere2
   :correct: d
   :feedback_a: When you add strings together you copy the second string right after the first, without any added space
   :feedback_b: Remember that * 2 repeats two copies of the same string
   :feedback_c: Adding strings together and repeating them doesn't add spaces between the strings
   :feedback_d: Strings are added together without adding any space and they are repeated without adding a space
   :feedback_e: The * 2 repeats the string two times
   
   What would the following code print?
   
   :: 
   
      first = "Hi"
      next = "There"
      print (first + next) * 2

Compute with Turtles
----------------------

A turtle here is not an animal.  
We are working with a robot turtle, an idea that dates back to the 1960's.  The original robot turtle had a physical pen in it.  The student-programmers would steer the robot around using programs, and create drawings with the pen.

.. figure:: Figures/mindstorms_turtle.jpg 
    :width: 200px
    :align: center
    :alt: Children playing with a Logo turtle robot that can draw with a pen
    :figclass: align-center
    
    Figure 3: Children playing with a Logo turtle robot that could draw with a pen
    
..	index::
	single: comment
	pair: programming; comment
    
Today, we can play with turtles in a fully-graphical and non-robotic way. Below is a Python program that creates a **Screen** (a space on the page for the turtle to move in and draw on) and a turtle named ``alex``, then has ``alex`` move around on the screen and when it moves it will draw. A part of a line that starts with a  ``#`` character is called a **comment**.  Python ignores everything from the ``#`` character to the end of the line.   **Comments** explain what we're doing in the programs.

Try clicking the |runbutton| button below to see what the following program does.

.. activecode:: Turtle_1
    :tour_1: "Line-by-line Tour"; 1: first-turtle-line-1; 2: first-turtle-line-2; 3: first-turtle-line-3; 4: first-turtle-line-4; 5: first-turtle-line-5; 6: first-turtle-line-6;
    :nocodelens:
	
    from turtle import *	# use the turtle library
    space = Screen()		# create a turtle space
    alex = Turtle()   		# create a turtle named alex
    alex.forward(150)		# move forward by 150 units
    alex.left(90)   		# turn by 90 degrees
    alex.forward(75)		# move forward by 75 units 
    
.. mchoicemf:: 1-Turtle_Q1
   :answer_a: North
   :answer_b: West
   :answer_c: South
   :answer_d: East
   :correct: d
   :feedback_a: Check which way alex moved first
   :feedback_b: Check which way alex moved first
   :feedback_c: Check which way alex moved first
   :feedback_d: Turtles start off facing east by default
   
   Which direction will alex move when the code below executes? 
   
   :: 
   
      from turtle import *       
      space = Screen()    		  
      alex = Turtle()   		
      alex.forward(100)  

Just by going forward, backward, left, and right, we can have a turtle draw a shape.  

.. fillintheblank:: 1-Shape
   :correct: ^square$|^Square$|^SQUARE$
   :feedback1: ('.*','Did you actually run the program?')
   :blankid: shapeBlank

   What shape will the program below draw when you click on the *Run* button? :textfield:`shapeBlank::medium`

.. activecode:: Turtle_2
    :tour_1: "Line-by-line Tour"; 1: t1-line1; 2: t1-line2; 3: t1-line3; 4: t1-line4; 5: t1-line5; 6: t1-line6; 7: t1-for100-1; 8: t1-right90-1; 9: t1-for100-2; 10: t1-right90-2; 11: t1-for100-3; 12: t1-right90-3; 
    :nocodelens:
	
    from turtle import *	# use the turtle library
    space = Screen()    	# create a turtle screen (space)
    zari = Turtle()   		# create a turtle named zari
    zari.setheading(90) 	# Point due north
    zari.forward(100)   	# tell zari to move forward by 100 units
    zari.right(90)       	# turn by 90 degrees
    zari.forward(100)   	# tell zari to move forward by 100 units
    zari.right(90)       	# turn by 90 degrees
    zari.forward(100)   	# tell zari to move forward by 100 units
    zari.right(90)      	# turn by 90 degrees
    zari.forward(100)    	# tell zari to move forward by 100 units
    zari.right(90)       	# turn by 90 degrees
   
       

Compute with Images
---------------------

..	index::
	single: images
	
..	index::
	single: pictures
	
..	index::
	single: pixels
	
Pictures on a computer are broken up into little bits called **pixels**, for *picture* (pix) *elements* (els).  These are laid out on a grid, from left to right (the horizontal or **x** dimension) and top to bottom (the vertical or **y** dimension).

.. figure:: Figures/grid.png
    :align: center
    :alt: A grid with horizontal (x) and vertical (y) dimensions 
    :figclass: align-center
    
    Figure 4: A grid with horizontal (x) and vertical (y) dimensions 

Pixels are quite small.  Even this small picture below has 180 columns and 240 rows of pixels:

.. figure:: Figures/arch.jpg
    :align: center
    :alt: picture of an arch from Oxford, England
    :figclass: align-center
    
    Figure 5: Picture of an arch from Oxford, England
    
.. mchoicemf:: 1-Image_Q1
   :answer_a: From left to right
   :answer_b: From right to left
   :answer_c: From top to bottom
   :answer_d: From bottom to top
   :correct: c
   :feedback_a: The x value increases from left to right
   :feedback_b: The horizontal direction is the x direction
   :feedback_c: The y value increases from top to bottom
   :feedback_d: This is common on a Cartesian coordinate system, but it is not true here
   
   Which way does y increase on an image?

Each pixel has a color associated with it: An amount of redness, an amount of greenness, and an amount of blueness.  All image manipulations in Photoshop and all filters in Instagram or Hipstamatic are created through manipulating those red, green, and blue color components in each pixel.

Let's remove the red from this picture.  The program below does that.

**There are lot of lines in the program below. Don't worry if they don't all make sense to you right now.**  

  - Especially when we write programs to manipulate images, you can ignore many of the lines.  Some allow us to work with images, like ``import image``.  Others like ``win = image.ImageWin()`` and ``img.draw(win)`` let us see the result.
  - Words after the ``#`` are ignored by the computer.  They are **comments** to human readers to help them understand a program. 
  
The lines that are important are under the comments (lines that start with a ``#``). Press the |audiobutton| button to hear an audio explanation of the important lines.  Press the |runbutton| button to run the program and show the changed image.  Please note that processing all those pixels can take a few minutes.  

.. raw:: html

    <img src="../_static/arch.jpg" id="arch.jpg" >
    
.. activecode:: Images_1
    :tour_1: "Important Lines Tour"; 4: img1-line4; 7-9: img1-line7-9; 10: img1-line10; 11: img1-line11;
    :nocodelens:

    import image
    
    # CREATE AN IMAGE FROM A FILE
    img = image.Image("arch.jpg")

    # CLEAR THE RED FROM ALL PIXELS
    for x in range(img.getWidth()):
        for y in range(img.getHeight()):
        	p = img.getPixel(x, y)
        	p.setRed(0)
        	img.setPixel(x, y, p)
            
    win = image.ImageWin()
    img.draw(win)
    
.. mchoicemf:: 1-Image_Black
   :answer_a: You still see the picture, but it is all in shades of gray.  
   :answer_b: The picture is all white.
   :answer_c: The picture is all black.
   :correct: c
   :feedback_a: Not if you set all colors to 0.
   :feedback_b: Did you try it?  This would be true if you set all the values to 255 instead of 0.
   :feedback_c: Black is the absence of light so setting all colors to 0 results in an all black image.
   
   What do you think happens when you set all the colors to 0?  Try adding ``p.setBlue(0)`` and ``p.setGreen(0)`` to the program above and run it to check.
 

Standards - Big Ideas
---------------------

This book will address the following Big Ideas from the Computer Science Principles Course:

 - In *Big Idea I: Creativity*:
 - LO 1.1.1: ... use computing tools and techniques to create artifacts.
 - LO 1.2.1: ... use computing tools and techniques for creative expression.
 - LO 1.3.1: ... use programming as a creative tool.

 - In *Big Idea II: Abstraction*:
 - LO 2.2.2: ... use multiple levels of abstraction in computation.
 
 - In *Big Idea IV: Algorithms*:
 - LO 4.1.1: ... develop an algorithm designed to be implemented to run on a computer.
 - LO 4.2.1: ... express an algorithm in a language.
 
 - In *Big Idea V: Programming*:
 - LO 5.1.1: ... explain how programs implement algorithms.
 - LO 5.4.1: ... employ appropriate mathematical and logical concepts in programming.
 
This chapter should have given you a sense for what we are going to be doing with a computer in this book.  Let's get started in the next chapter by talking about what the computer can do and how you can control it.  
