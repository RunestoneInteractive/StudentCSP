..  Copyright (C)  Mark Guzdial, Barbara Ericson, Briana Morrison
    Permission is granted to copy, distribute and/or modify this document
    under the terms of the GNU Free Documentation License, Version 1.3 or
    any later version published by the Free Software Foundation; with
    Invariant Sections being Forward, Prefaces, and Contributor List,
    no Front-Cover Texts, and no Back-Cover Texts.  A copy of the license
    is included in the section entitled "GNU Free Documentation License".

.. 	qnum::
	:start: 1
	:prefix: csp-14-

Turtle Functions and Procedures
=================================

..	index::
    pair: turtle; procedures
    pair: turtle; functions
    pair: turtle; documentation
    pair: turtle; backward
    pair: turtle; forward
    pair: turtle; color
    pair: turtle; goto
    pair: turtle; left
    pair: turtle; pendown
    pair: turtle; penup
    pair: turtle; pensize
    pair: turtle; shape
    pair: turtle; stampe
    pair: turtle; xcor
    pair: turtle; ycor
    pair: turtle; Turtle

Turtles can do more than go forward, turn left, and turn right.  The table below lists turtle functions and procedures.

==========  ==========  =========================
Name        Parameters  Description
==========  ==========  =========================
backward    amount        Moves the turle backward by the specified amount
color       colorname     Sets the color for drawing.  Use 'red', 'black', etc
forward     amount        Moves the turtle forward by the specified amount	  
goto        x,y           Moves the turtle to position x,y
left        angle         Turns the turtle counter clockwise by the specified angle
pendown     None          Puts down the turtles tail so that it draws when it moves
penup       None          Picks up the turtles tail so that it doesn't draw when it moves
pensize     width         Sets the width of the pen for drawing
right       angle         Turns the turtle clockwise by the specified angle
shape       shapename     Should be 'arrow', 'classic', 'turtle', or 'circle'
stamp       None          Leaves an impression of a turtle shape at the current location
Turtle      None          Creates and returns a new turtle object
xcor        None          Returns the x value of the turtle's position
ycor        None          Returns the y values of the turtle's position
==========  ==========  =========================

.. mchoicemf:: 14-change_size
   :answer_a: shape
   :answer_b: xcor
   :answer_c: pensize
   :answer_d: color
   :correct: c
   :feedback_a: Use shape to set the shape used for the turtle.  It doesn't affect the line that is drawn.  
   :feedback_b: Use this function to get the x value of the turtle's position
   :feedback_c: This changes the width of the line that the turtle draws as it moves.
   :feedback_d: Use color to change the line color and the turtle color.

   What procedure would you use to change the size of the line the turtle leaves when it moves?
   
.. mchoicemf:: 14-goto
   :answer_a: stamp
   :answer_b: xcor
   :answer_c: penup
   :answer_d: goto
   :correct: d
   :feedback_a: Use stamp to leave a copy of turtle shape at the current position. 
   :feedback_b: Use xcor to get the x value of the turtle's position.
   :feedback_c: Use penup to pick up the pen (stop drawing as you move).
   :feedback_d: Use goto to move to the given x and y position.

   What procedure would you use move the turtle to a given x and y position?

Once you are comfortable with the basics of turtle graphics you can read about even
more options on the `Python Docs Website <http://docs.python.org/dev/py3k/library/turtle.html>`_. 


Using Decisions with Turtles
==============================

Here's an example of conditional execution (using an ``if`` statement) with a turtle.  We can make the turtle do some action when a condition is true.  In this example if the turtle gets to right side of the space (drawing area), pick it up and move it back to the left side of the space further down so that it can draw more.

.. activecode:: csp_td_pattern
    :tour_1: "Structural Tour"; 1-2: td1-line1-2; 3: td1-line3; 4-5: td1-line4-5; 6-9: td1-line6-9; 10: td1-line10; 11-14: td1-line11-14; 15-18: td1-line15-18; 
    :nocodelens:

    from turtle import *      # use the turtle library
    space = Screen()          # create a turtle screen (space)
    maxX = space.window_width() / 2  # get the max x value
    jaz = Turtle()            # create a turtle named jaz
    jaz.shape('turtle')       # set the shape for jaz to turtle
    jaz.penup()               # pick up the pen (don't draw)
    jaz.goto(-1 * maxX,100)   # go to the left side of the space
    jaz.pendown()             # put the pen down to draw with
    jaz.left(60)              # turn the turtle left 60 degrees
    for x in range(10):       # repeat the body 10 times
      jaz.forward(100)           # go forward 100
      jaz.right(120)             # turn right 120 degrees
      jaz.forward(100)           # go forward 100
      jaz.left(120)              # turn left 120 degrees
      if (jaz.xcor() >= maxX):   # if at right edge of space
         jaz.penup()                # pick up the pen
         jaz.goto(-1 * maxX,jaz.ycor() - 100)  # move left & down
         jaz.pendown()              # put the pen down
  
       
.. mchoicemf:: 14-finish_pattern
   :answer_a: 12
   :answer_b: 14
   :answer_c: 16
   :answer_d: 18
   :correct: c
   :feedback_a: Using a range of 12 will complete the pattern on this line, but what should it be to finish the pattern in the space?
   :feedback_b: This will stop in the middle of the last line of the pattern.  How many would fill the last row?
   :feedback_c: Each iteration of the loop draws one peak and there are 4 peaks per row.  There is room for 4 rows so the answer is 4 * 4 = 16.
   :feedback_d: This would try to draw on the line below the end of the drawing area.  

   What value should you use for range in line 10 to complete the pattern to fill the drawing space?  
   
Modify the code above to draw a different pattern.  Try turning changing the direction of every turn, what does that do?
   
Detecting Odd and Even
=======================
   
..	index::
   	single: remainder
   	single: modulus
   	single: odd
   	single: even

   	
One common thing to do with conditionals is to check if a number is odd or even.  If a number is evenly divisible by 2 with no remainder, then it is even.  You can calculate the remainder with the **modulus** operator ``%`` like this ``num % 2 == 0``.  If a number divided by 2 leaves a remainder of 1, then the number is odd.  You can check for this using ``num % 2 == 1``.  The code below uses two ``if`` statements to check if the current value of ``y`` is even or odd.  It uses this to draw two alternating color stripes.
   
.. activecode:: csp_td_stripes
    :tour_1: "Structural Tour"; 1-2: td2line1-2; 3-4: td2line3-4; 5-6: td2line5-6; 7: td2line7; 8: td2line8; 9-10: td2line9-10; 11-12: td2line11-12; 13: td2line13; 14: td2line14; 15: td2line15;
    :nocodelens:

    from turtle import *      # use the turtle library
    space = Screen()          # create a turtle screen (space)
    width = space.window_width() # get the width of the space
    maxX = width / 2          # get the max x value
    sue = Turtle()             # create a turtle named sue         
    sue.pensize(10)            # set the pen width
    for y in range(5):        # repeat 5 times
       sue.penup()                 # pick up the pen
       if y % 2 == 0:             # if even row
          sue.color('red')          # set the color to red
       if y % 2 == 1:             # if odd row
          sue.color('black')       # set the color to black
       sue.goto(-1 * maxX,y * 10)  # move to the next row
       sue.pendown()               # put the pen down
       sue.forward(width)          # move forward by the width
       
.. mchoicemf:: 14-finish_stripes
   :answer_a: 10
   :answer_b: 20
   :answer_c: 21
   :answer_d: 40
   :correct: c
   :feedback_a: This will stop before filling the top half of the space. Try it.
   :feedback_b: The turtle starts at the middle of height and draws 5 pixels below it and 5 pixels above it, so this leaves 5 pixels at the top that need to be filled.
   :feedback_c: The height of the top half is 200 and each stripe is a height of 10 so 20 nearly does it, but 21 fills the entire area.
   :feedback_d: This would fill more than the top half.

   What value should you use as the parameter for the range function in line 7 to fill the top half of the drawing space with stripes?  The height of the space is 400.  
       
Try to change the code above to use an ``else`` instead of the second ``if`` and yet still have the same result.  
Try to change the code above to use both an ``elif`` and ``else`` to draw three different colored stripes in a repeated pattern.  You can use ``y % 3`` for three different conditions.  

**Mixed up programs**

.. parsonsprob:: 14-vert_stripes

   The following program should draw vertical color stipes alternating between red and black, but the code is mixed up.  Drag the block from left to right and place them in the correct order with the correct indention.
   -----
   from turtle import *     
   space = Screen()        
   height = space.window_height()
   =====
   maxY = height / 2         
   sue = Turtle()              
   sue.pensize(10) 
   sue.left(90)       
   =====
   for index in range(5):      
   =====
      sue.penup() 
   =====           
      if index % 2 == 0:     
   ===== 
         sue.color('red')        
   =====
      else:                     
   ===== 
         sue.color('black')      
   =====
      sue.goto(index * 10, -1 * maxY)
      sue.pendown()             
      sue.forward(height)  
      
Using Random Numbers
======================

..	index::
    pair: random; randrange

We can generate random numbers in Python using the ``randrange`` function in the ``random`` library.  This function takes an optional starting value (inclusive) and the ending value for the range (exclusive).  We can use random numbers in games to add an element of chance.  We can also use random numbers to move the turtle to random positions as shown below.  We are using conditionals to alternate the drawing color each time the turtle moves.  

.. activecode:: csp_td_scribble
    :tour_1: "Structural Tour"; 1-2: td3-line1-2; 3-5: td3-line3-5; 6-9: td3-line6-9; 10: td3-line10; 11: td3-line11; 12-13: td3-line12-13; 14-15: td3-line14-15; 16-18: td3-line16-18; 
    :nocodelens:

    from turtle import *      # use the turtle library
    import random 
    space = Screen()          # create a turtle screen (space)
    width = space.window_width()
    height = space.window_height()
    maxX = width / 2  # get the max x value
    minX = -1 * maxX
    maxY = height / 2 
    minY = -1 * maxY
    jaz = Turtle()            # create a turtle named jaz
    for num in range(10):
       if num % 2 == 0:             # if even row
          jaz.color('red')          # set the color to red
       if num % 2 == 1:             # if odd row
          jaz.color('black')       # set the color to black
       randX = random.randrange(minX, maxX)
       randY = random.randrange(minY, maxY)
       jaz.goto(randX,randY)
       
.. mchoicemf:: 14-randrange1
   :answer_a: randX = random.randrange(minX, maxX)
   :answer_b: randX = random.randrange(0, maxX)
   :answer_c: randX = random.randrange(minX, 0)
   :correct: c
   :feedback_a: This will range from the minimum x value (inclusive) to the maximum x value (exclusive).  It will cover the whole width of the drawing area.
   :feedback_b: This will range from 0 to the maximum x value (exclusive).  It will cover the right half of the drawing area.
   :feedback_c: This will range from the minimum x value (inclusive) to 0.  It will cover the left half o the drawing area.

   What could you use to limit the x values to just the left half of the drawing space (screen)? 
      
Avoiding Collisions
======================

You can use conditionals to detect when two turtles are getting close to each other and then have the turtles take evasive action. In the code below they try both try to turn right just as ships do if they are heading straight for each other.    
   
.. activecode:: csp_td_avoid_collision
    :tour_1: "Structural Tour"; 1-2: td4-line1-2; 3-6: td4-line3-6; 7: td4-line7; 8-11: td4-line8-11; 12: td4-line12; 13-14: td4-line13-14; 15-17: td4-line15-17;
    :nocodelens:

    from turtle import *      # use the turtle library
    space = Screen()          # create a turtle screen (space)
    jaz = Turtle()            # create a turtle named jaz
    jaz.shape('turtle')       # set the shape for jaz to turtle
    mia = Turtle()            # create a turtle named mia
    mia.shape('turtle')       # set the shape for mia to turtle
    mia.color('red')          # set the color for mia to red
    mia.penup()               # pick up the pen (don't draw)
    mia.goto(100,0)           # move to the right 100
    mia.pendown()             # put down the pen
    mia.right(180)            # turn 180 degrees (face jaz)
    for x in range(20):       # repeat the body 20 times
       jaz.forward(10)            # go forward 10
       mia.forward(10)             # go forward 10
       if (mia.xcor() - jaz.xcor() < 40):  # if they get close
          jaz.right(45)                       # turn jaz left
          mia.right(45)                       # turn mia left
  
Notice that this code doesn't quite work as intended.  Both ``jaz`` and ``mia`` turn completely around.  How could you modify the code to fix it so that they turn to avoid each other, but don't end up turning completely around?  You might want to check the distance between the y values as well.